
DeelA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000724  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003b2  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082a  00000000  00000000  00000ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007bac  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000388  00000000  00000000  0000945c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000097e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000600  00000000  00000000  00009884  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	b3 c0       	rjmp	.+358    	; 0x18c <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9a d0       	rcall	.+308    	; 0x1f8 <main>
  c4:	df c0       	rjmp	.+446    	; 0x284 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <e_high_low>:
		//left
		for(int i = position; i < 0; i++){
			lcd_write_data(0b00010000);
		}
	}
}
  c8:	ab 9a       	sbi	0x15, 3	; 21
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <e_high_low+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <e_high_low+0xc>
  d4:	00 00       	nop
  d6:	ab 98       	cbi	0x15, 3	; 21
  d8:	89 ef       	ldi	r24, 0xF9	; 249
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <e_high_low+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <e_high_low+0x1a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <lcd_write_data>:
  e6:	cf 93       	push	r28
  e8:	c8 2f       	mov	r28, r24
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	ed df       	rcall	.-38     	; 0xc8 <e_high_low>
  ee:	c2 95       	swap	r28
  f0:	c0 7f       	andi	r28, 0xF0	; 240
  f2:	c5 bb       	out	0x15, r28	; 21
  f4:	e9 df       	rcall	.-46     	; 0xc8 <e_high_low>
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <ddram_home>:
	PORTC = (dat << 4); //shift the bits 4 to the left (first 4 will be replaced with the last 4)
	e_high_low();
}

void ddram_home(){
	lcd_write_data(0x02);
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	f4 cf       	rjmp	.-24     	; 0xe6 <lcd_write_data>
  fe:	08 95       	ret

00000100 <init>:
					 third 1 (1 = cursor on, 0 = cursor off)
					 fourth  1 (1 = blink on, 0 = blink off)
*/
void init(){
	//4 bit modus
	DDRC = 0xFF;
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	84 bb       	out	0x14, r24	; 20

	//all low
	PORTC = 0x00;
 104:	15 ba       	out	0x15, r1	; 21

	//4bit modus
	PORTC = 0x20;
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	85 bb       	out	0x15, r24	; 21
	e_high_low();
 10a:	de df       	rcall	.-68     	; 0xc8 <e_high_low>
	
	//2 lines
	lcd_write_data(0x28);
 10c:	88 e2       	ldi	r24, 0x28	; 40
 10e:	eb df       	rcall	.-42     	; 0xe6 <lcd_write_data>
	
	//display on/off
	lcd_write_data(0x0F);
 110:	8f e0       	ldi	r24, 0x0F	; 15
 112:	e9 df       	rcall	.-46     	; 0xe6 <lcd_write_data>
	
	//entry mode set (increase cursor)
	lcd_write_data(0x06);
 114:	86 e0       	ldi	r24, 0x06	; 6
 116:	e7 df       	rcall	.-50     	; 0xe6 <lcd_write_data>

	//ddram home
	lcd_write_data(0x02);
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	e5 cf       	rjmp	.-54     	; 0xe6 <lcd_write_data>
 11c:	08 95       	ret

0000011e <lcd_write_char>:
void ddram_home(){
	lcd_write_data(0x02);
}

void lcd_write_char(unsigned char dat)
{
 11e:	cf 93       	push	r28
 120:	c8 2f       	mov	r28, r24
	//first 4 bits
	PORTC = dat;
 122:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<2);
 124:	aa 9a       	sbi	0x15, 2	; 21
	e_high_low();
 126:	d0 df       	rcall	.-96     	; 0xc8 <e_high_low>
	
	//last 4 bits
	PORTC = (dat<<4);
 128:	c2 95       	swap	r28
 12a:	c0 7f       	andi	r28, 0xF0	; 240
 12c:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<2);
 12e:	aa 9a       	sbi	0x15, 2	; 21
	e_high_low();
 130:	cb df       	rcall	.-106    	; 0xc8 <e_high_low>
}
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <display_text>:
	//4bit modus
	PORTC = 0x20;
	e_high_low();
}

void display_text(char *str){
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	while(*str){
 13c:	88 81       	ld	r24, Y
 13e:	88 23       	and	r24, r24
 140:	29 f0       	breq	.+10     	; 0x14c <display_text+0x16>
 142:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_char(*str++);
 144:	ec df       	rcall	.-40     	; 0x11e <lcd_write_char>
	PORTC = 0x20;
	e_high_low();
}

void display_text(char *str){
	while(*str){
 146:	89 91       	ld	r24, Y+
 148:	81 11       	cpse	r24, r1
 14a:	fc cf       	rjmp	.-8      	; 0x144 <display_text+0xe>
		lcd_write_char(*str++);
	}
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <display_int>:

void display_int(int val){
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	c4 56       	subi	r28, 0x64	; 100
 15c:	d1 09       	sbc	r29, r1
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	f8 94       	cli
 162:	de bf       	out	0x3e, r29	; 62
 164:	0f be       	out	0x3f, r0	; 63
 166:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 168:	4a e0       	ldi	r20, 0x0A	; 10
 16a:	be 01       	movw	r22, r28
 16c:	6f 5f       	subi	r22, 0xFF	; 255
 16e:	7f 4f       	sbci	r23, 0xFF	; 255
 170:	56 d0       	rcall	.+172    	; 0x21e <__itoa_ncheck>
	char c[100];
	itoa(val, c, 10);
	display_text(c);
 172:	ce 01       	movw	r24, r28
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	df df       	rcall	.-66     	; 0x136 <display_text>
}
 178:	cc 59       	subi	r28, 0x9C	; 156
 17a:	df 4f       	sbci	r29, 0xFF	; 255
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <__vector_9>:
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

ISR (TIMER2_COMP_vect) // timer2 overflow interrupt
{
 18c:	1f 92       	push	r1
 18e:	0f 92       	push	r0
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	0f 92       	push	r0
 194:	11 24       	eor	r1, r1
 196:	0b b6       	in	r0, 0x3b	; 59
 198:	0f 92       	push	r0
 19a:	2f 93       	push	r18
 19c:	3f 93       	push	r19
 19e:	4f 93       	push	r20
 1a0:	5f 93       	push	r21
 1a2:	6f 93       	push	r22
 1a4:	7f 93       	push	r23
 1a6:	8f 93       	push	r24
 1a8:	9f 93       	push	r25
 1aa:	af 93       	push	r26
 1ac:	bf 93       	push	r27
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	OCR2 = 0;  //reset the OCR2 value
 1b2:	13 bc       	out	0x23, r1	; 35
	counter++; //increment the counter
 1b4:	80 91 00 01 	lds	r24, 0x0100
 1b8:	90 91 01 01 	lds	r25, 0x0101
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	90 93 01 01 	sts	0x0101, r25
 1c2:	80 93 00 01 	sts	0x0100, r24
	
	ddram_home(); //overwrite old data
 1c6:	99 df       	rcall	.-206    	; 0xfa <ddram_home>
	display_int(counter); //display the old data
 1c8:	80 91 00 01 	lds	r24, 0x0100
 1cc:	90 91 01 01 	lds	r25, 0x0101
 1d0:	c0 df       	rcall	.-128    	; 0x152 <display_int>
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0b be       	out	0x3b, r0	; 59
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <main>:

int main( void )
{
	//lcd init
	init();
 1f8:	83 df       	rcall	.-250    	; 0x100 <init>
	display_int(counter);
 1fa:	80 91 00 01 	lds	r24, 0x0100
 1fe:	90 91 01 01 	lds	r25, 0x0101
 202:	a7 df       	rcall	.-178    	; 0x152 <display_int>

	TCCR2 |= (1 << WGM21) | (1 << COM21) ; //WGM21 -> CTC(clear timer on compare) mode, COM21 -> Clear OC2 on compare match
 204:	85 b5       	in	r24, 0x25	; 37
 206:	88 62       	ori	r24, 0x28	; 40
 208:	85 bd       	out	0x25, r24	; 37
	TCCR2 |=  (1 << CS22)  | (1 << CS21)  | (1 << CS20); //set the clock to external clock source on pin T2 rising edge.
 20a:	85 b5       	in	r24, 0x25	; 37
 20c:	87 60       	ori	r24, 0x07	; 7
 20e:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1 << OCIE2); //enable counter2 output compare match interrupt
 210:	87 b7       	in	r24, 0x37	; 55
 212:	80 68       	ori	r24, 0x80	; 128
 214:	87 bf       	out	0x37, r24	; 55
	OCR2 = 1; //this is the value which gets compared to 
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	83 bd       	out	0x23, r24	; 35
	sei();
 21a:	78 94       	sei

	while (1)
	{
		
	}
 21c:	ff cf       	rjmp	.-2      	; 0x21c <main+0x24>

0000021e <__itoa_ncheck>:
 21e:	bb 27       	eor	r27, r27
 220:	4a 30       	cpi	r20, 0x0A	; 10
 222:	31 f4       	brne	.+12     	; 0x230 <__itoa_ncheck+0x12>
 224:	99 23       	and	r25, r25
 226:	22 f4       	brpl	.+8      	; 0x230 <__itoa_ncheck+0x12>
 228:	bd e2       	ldi	r27, 0x2D	; 45
 22a:	90 95       	com	r25
 22c:	81 95       	neg	r24
 22e:	9f 4f       	sbci	r25, 0xFF	; 255
 230:	01 c0       	rjmp	.+2      	; 0x234 <__utoa_common>

00000232 <__utoa_ncheck>:
 232:	bb 27       	eor	r27, r27

00000234 <__utoa_common>:
 234:	fb 01       	movw	r30, r22
 236:	55 27       	eor	r21, r21
 238:	aa 27       	eor	r26, r26
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	aa 1f       	adc	r26, r26
 240:	a4 17       	cp	r26, r20
 242:	10 f0       	brcs	.+4      	; 0x248 <__utoa_common+0x14>
 244:	a4 1b       	sub	r26, r20
 246:	83 95       	inc	r24
 248:	50 51       	subi	r21, 0x10	; 16
 24a:	b9 f7       	brne	.-18     	; 0x23a <__utoa_common+0x6>
 24c:	a0 5d       	subi	r26, 0xD0	; 208
 24e:	aa 33       	cpi	r26, 0x3A	; 58
 250:	08 f0       	brcs	.+2      	; 0x254 <__utoa_common+0x20>
 252:	a9 5d       	subi	r26, 0xD9	; 217
 254:	a1 93       	st	Z+, r26
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	79 f7       	brne	.-34     	; 0x238 <__utoa_common+0x4>
 25a:	b1 11       	cpse	r27, r1
 25c:	b1 93       	st	Z+, r27
 25e:	11 92       	st	Z+, r1
 260:	cb 01       	movw	r24, r22
 262:	00 c0       	rjmp	.+0      	; 0x264 <strrev>

00000264 <strrev>:
 264:	dc 01       	movw	r26, r24
 266:	fc 01       	movw	r30, r24
 268:	67 2f       	mov	r22, r23
 26a:	71 91       	ld	r23, Z+
 26c:	77 23       	and	r23, r23
 26e:	e1 f7       	brne	.-8      	; 0x268 <strrev+0x4>
 270:	32 97       	sbiw	r30, 0x02	; 2
 272:	04 c0       	rjmp	.+8      	; 0x27c <strrev+0x18>
 274:	7c 91       	ld	r23, X
 276:	6d 93       	st	X+, r22
 278:	70 83       	st	Z, r23
 27a:	62 91       	ld	r22, -Z
 27c:	ae 17       	cp	r26, r30
 27e:	bf 07       	cpc	r27, r31
 280:	c8 f3       	brcs	.-14     	; 0x274 <strrev+0x10>
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
