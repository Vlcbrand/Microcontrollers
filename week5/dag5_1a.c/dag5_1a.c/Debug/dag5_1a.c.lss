
dag5_1a.c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000872  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ca  00000000  00000000  00000bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b9  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e6  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e4  00000000  00000000  00001b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	58 d0       	rcall	.+176    	; 0x15a <main>
  aa:	97 c0       	rjmp	.+302    	; 0x1da <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <e_high_low>:
		//left
		for(int i = position; i < 0; i++){
			lcd_write_data(0b00010000);
		}
	}
}
  ae:	ab 9a       	sbi	0x15, 3	; 21
  b0:	89 ef       	ldi	r24, 0xF9	; 249
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <e_high_low+0x6>
  b8:	00 c0       	rjmp	.+0      	; 0xba <e_high_low+0xc>
  ba:	00 00       	nop
  bc:	ab 98       	cbi	0x15, 3	; 21
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <e_high_low+0x14>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <e_high_low+0x1a>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <lcd_write_data>:
  cc:	cf 93       	push	r28
  ce:	c8 2f       	mov	r28, r24
  d0:	85 bb       	out	0x15, r24	; 21
  d2:	ed df       	rcall	.-38     	; 0xae <e_high_low>
  d4:	c2 95       	swap	r28
  d6:	c0 7f       	andi	r28, 0xF0	; 240
  d8:	c5 bb       	out	0x15, r28	; 21
  da:	e9 df       	rcall	.-46     	; 0xae <e_high_low>
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <ddram_home>:
	PORTC = (dat << 4); //shift the bits 4 to the left (first 4 will be replaced with the last 4)
	e_high_low();
}

void ddram_home(){
	lcd_write_data(0x02);
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	f4 cf       	rjmp	.-24     	; 0xcc <lcd_write_data>
  e4:	08 95       	ret

000000e6 <init>:
					 third 1 (1 = cursor on, 0 = cursor off)
					 fourth  1 (1 = blink on, 0 = blink off)
*/
void init(){
	//4 bit modus
	DDRC = 0xFF;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	84 bb       	out	0x14, r24	; 20

	//all low
	PORTC = 0x00;
  ea:	15 ba       	out	0x15, r1	; 21

	//4bit modus
	PORTC = 0x20;
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	85 bb       	out	0x15, r24	; 21
	e_high_low();
  f0:	de df       	rcall	.-68     	; 0xae <e_high_low>
	
	//2 lines
	lcd_write_data(0x28);
  f2:	88 e2       	ldi	r24, 0x28	; 40
  f4:	eb df       	rcall	.-42     	; 0xcc <lcd_write_data>
	
	//display on/off
	lcd_write_data(0x0F);
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	e9 df       	rcall	.-46     	; 0xcc <lcd_write_data>
	
	//entry mode set (increase cursor)
	lcd_write_data(0x06);
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	e7 df       	rcall	.-50     	; 0xcc <lcd_write_data>

	//ddram home
	lcd_write_data(0x02);
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	e5 cf       	rjmp	.-54     	; 0xcc <lcd_write_data>
 102:	08 95       	ret

00000104 <lcd_write_char>:
void ddram_home(){
	lcd_write_data(0x02);
}

void lcd_write_char(unsigned char dat)
{
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
	//first 4 bits
	PORTC = dat;
 108:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<2);
 10a:	aa 9a       	sbi	0x15, 2	; 21
	e_high_low();
 10c:	d0 df       	rcall	.-96     	; 0xae <e_high_low>
	
	//last 4 bits
	PORTC = (dat<<4);
 10e:	c2 95       	swap	r28
 110:	c0 7f       	andi	r28, 0xF0	; 240
 112:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<2);
 114:	aa 9a       	sbi	0x15, 2	; 21
	e_high_low();
 116:	cb df       	rcall	.-106    	; 0xae <e_high_low>
}
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <display_text>:
	//4bit modus
	PORTC = 0x20;
	e_high_low();
}

void display_text(char *str){
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
	while(*str){
 122:	88 81       	ld	r24, Y
 124:	88 23       	and	r24, r24
 126:	29 f0       	breq	.+10     	; 0x132 <display_text+0x16>
 128:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_char(*str++);
 12a:	ec df       	rcall	.-40     	; 0x104 <lcd_write_char>
	PORTC = 0x20;
	e_high_low();
}

void display_text(char *str){
	while(*str){
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	fc cf       	rjmp	.-8      	; 0x12a <display_text+0xe>
		lcd_write_char(*str++);
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <wait>:

// wait(): busy waiting for 'ms' millisecond
// Used library: util/delay.h
void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
 138:	18 16       	cp	r1, r24
 13a:	19 06       	cpc	r1, r25
 13c:	6c f4       	brge	.+26     	; 0x158 <wait+0x20>
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	ef ec       	ldi	r30, 0xCF	; 207
 144:	f7 e0       	ldi	r31, 0x07	; 7
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <wait+0xe>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <wait+0x14>
 14c:	00 00       	nop
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	28 17       	cp	r18, r24
 154:	39 07       	cpc	r19, r25
 156:	a9 f7       	brne	.-22     	; 0x142 <wait+0xa>
 158:	08 95       	ret

0000015a <main>:
}


// send/receive uart - dB-meter
int main( void )
{
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	60 97       	sbiw	r28, 0x10	; 16
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
	char buffer[16];						// declare string buffer 
	DDRB = 0xFF;							// set PORTB for output
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	87 bb       	out	0x17, r24	; 23

	init();								// initialize LCD-display
 172:	b9 df       	rcall	.-142    	; 0xe6 <init>
	usart0_init();							// initialize USART0
 174:	0f d0       	rcall	.+30     	; 0x194 <usart0_init>
	usart0_start();
 176:	17 d0       	rcall	.+46     	; 0x1a6 <usart0_start>

	while (1)
	{
		wait(50);							// every 50 ms (busy waiting)
 178:	82 e3       	ldi	r24, 0x32	; 50
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	dd df       	rcall	.-70     	; 0x138 <wait>
		PORTB ^= BIT(7);					// toggle bit 7 for testing
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	80 58       	subi	r24, 0x80	; 128
 182:	88 bb       	out	0x18, r24	; 24

			// receive string from uart
		uart0_receiveString(buffer);
 184:	ce 01       	movw	r24, r28
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	16 d0       	rcall	.+44     	; 0x1b6 <uart0_receiveString>
		ddram_home();
 18a:	aa df       	rcall	.-172    	; 0xe0 <ddram_home>
		//clear_display();
		display_text(buffer);
 18c:	ce 01       	movw	r24, r28
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	c5 df       	rcall	.-118    	; 0x11c <display_text>
		
		// write string to LCD display
	}
 192:	f2 cf       	rjmp	.-28     	; 0x178 <main+0x1e>

00000194 <usart0_init>:
int uart0_sendChar( char ch )
{
	while (!(UCSR0A & BIT(UDRE0))) ;		// wait until UDRE0 is set: transmit buffer is ready
	UDR0 = ch;								// send ch
	return 0;								// OK
}
 194:	10 92 90 00 	sts	0x0090, r1
 198:	8f ec       	ldi	r24, 0xCF	; 207
 19a:	89 b9       	out	0x09, r24	; 9
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	80 93 95 00 	sts	0x0095, r24
 1a2:	1a b8       	out	0x0a, r1	; 10
 1a4:	08 95       	ret

000001a6 <usart0_start>:
 1a6:	8a b1       	in	r24, 0x0a	; 10
 1a8:	88 61       	ori	r24, 0x18	; 24
 1aa:	8a b9       	out	0x0a, r24	; 10
 1ac:	08 95       	ret

000001ae <uart0_receiveChar>:

char uart0_receiveChar( void )
{
	while (!(UCSR0A & BIT(RXC0))) ;			// if RX0 is set: unread data present in buffer
 1ae:	5f 9b       	sbis	0x0b, 7	; 11
 1b0:	fe cf       	rjmp	.-4      	; 0x1ae <uart0_receiveChar>
	return UDR0;							// read ch
 1b2:	8c b1       	in	r24, 0x0c	; 12
}
 1b4:	08 95       	ret

000001b6 <uart0_receiveString>:

int uart0_receiveString( char* string)
{
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
	int stop = 0; // boolean for stop value
	char ch;
	while (!stop) // while contunie
	{
		ch = uart0_receiveChar(); // read ch
 1c0:	f6 df       	rcall	.-20     	; 0x1ae <uart0_receiveChar>
		if ( ch == LF ) // stop at LF
 1c2:	8a 30       	cpi	r24, 0x0A	; 10
 1c4:	11 f0       	breq	.+4      	; 0x1ca <uart0_receiveString+0x14>
		stop = 1;
		else
		*string++ = ch; // else fill buffer
 1c6:	89 93       	st	Y+, r24
 1c8:	fb cf       	rjmp	.-10     	; 0x1c0 <uart0_receiveString+0xa>
	}
	*string = '\0'; // string terminator
 1ca:	18 82       	st	Y, r1
	return 0;
}
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
